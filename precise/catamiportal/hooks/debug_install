#!/bin/bash -x
#==================================================#
# BUILDS THE CATAMIPORTAL SERVER FROM A FRESH 
# INSTALL OF UBUNTU
# -------------------------------------------------#
# USE
#
# sudo ./destroy  # kills any old dbases
# opt 1)
# sudo ./debug_install -u <username> -p <password>
# opt 2)
# sudo ./debug_install -f <credential file>
# opt 3)
# sudo ./debug_install # defaults to looking in ~/.catami.cred
#
# CREDENTIAL FILE
# LINE 1 #Comment
# LINE 2 <username>
# LINE 3 <password>
#
#==================================================#

set -eux

CATAMI_HOME=/home/catami/catamiportal
CREDFILE=~/.catami.cred
GEOSERVER_WAIT_TIME=120 #secs

mkdir -p /home/catami
mkdir -p $CATAMI_HOME

# Copy some files over for geoserver
cp datastore-config.xml $CATAMI_HOME
cp catami-colour-by-depth.sld $CATAMI_HOME

#==================================================#
# GRAB THE U_NAME AND PASSWORD
#==================================================#
OPTFIND=1
U_NAME=""
PASSWORD=""

while getopts "u:p:f:" opt; do
    case "$opt" in
    u)
        U_NAME=$OPTARG
        ;;
    p)
        PASSWORD=$OPTARG
        ;;
    f)
        CREDFILE=$OPTARG
        ;;
    esac
done

shift $((OPTFIND-1))

#["$1" = "--"] & shift

if [ -z ${U_NAME} ] # if no user variable must be passed credfile
then

    USER_HOME=$(eval echo ~${SUDO_USER})
    echo "expecting credential file in :: "${USER_HOME}
    i=0
    while read line; do
        param[$i]=$line
        i=`expr $i + 1` 
    done < $CREDFILE

    U_NAME=${param[1]}
    PASSWORD=${param[2]} 
fi

echo "user=$U_NAME, password=$PASSWORD"

#==================================================#
# These should be just the server requirements only 
# !! Exception being scipy for now. pip install not 
# working
#==================================================#
#juju-log "Installing Apache2, Django1.4, postgres, postgis via apt-get"
apt-get install -y python postgresql-9.1 apache2 python-setuptools postgresql-server-dev-9.1 postgresql-9.1-postgis postgis python-scipy binutils libproj-dev gdal-bin git unzip tomcat7

#==================================================#
# SETUP THE POSGIS TEMPLATE FOR POSTGRESQL
#==================================================#
GEOGRAPHY=0
POSTGIS_SQL=postgis.sql

if [ -d "/usr/share/postgresql/9.1/contrib/postgis-1.5" ]
then
    POSTGIS_SQL_PATH=/usr/share/postgresql/9.1/contrib/postgis-1.5
    GEOGRAPHY=1
fi

su postgres -c "createdb -E UTF8 template_postgis" && \
su postgres -c "( createlang -d template_postgis -l | grep plpgsql || createlang -d template_postgis plpgsql )" && \
su postgres -c "psql -d postgres -c \"UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';\"" && \
su postgres -c "psql -d template_postgis -f $POSTGIS_SQL_PATH/$POSTGIS_SQL" && \
su postgres -c "psql -d template_postgis -f $POSTGIS_SQL_PATH/spatial_ref_sys.sql" && \
su postgres -c "psql -d template_postgis -c \"GRANT ALL ON geometry_columns TO PUBLIC;\"" && \
su postgres -c "psql -d template_postgis -c \"GRANT ALL ON spatial_ref_sys TO PUBLIC;\""

if [ $GEOGRAPHY -eq 1 ]
then
    su postgres -c "psql -d template_postgis -c \"GRANT ALL ON geography_columns TO PUBLIC;\""
fi

#==================================================#
# SETUP THE DATABASE AND USERS
#==================================================#

su postgres -c "createuser -Rs -A -d -U postgres $U_NAME"
su postgres -c "createdb -E utf8 -O $U_NAME -T template_postgis Force"
su postgres -c "psql -c \"ALTER USER $U_NAME WITH PASSWORD '$PASSWORD';\""

sed -i '1a#!! Autogenerated by Jujuj catamiportal charm !!' /etc/postgresql/9.1/main/pg_hba.conf
sed -i "2alocal	        all     $U_NAME                  md5"  /etc/postgresql/9.1/main/pg_hba.conf
sed -i '3ahost		all	all	0.0.0.0/0	md5' /etc/postgresql/9.1/main/pg_hba.conf

sed -i 's/#listen_addresses = /listen_addresses =/' /etc/postgresql/9.1/main/postgresql.conf
sed -i "s/localhost/*/" /etc/postgresql/9.1/main/postgresql.conf

sed -i "s/#port = 5432/port = 5432 #sed gen/" /etc/postgresql/9.1/main/postgresql.conf

#juju-log "Restarting postgres"
/etc/init.d/postgresql restart

#==================================================#
# SETUP THE PYTHON ENVIRONMENT
#==================================================#
#juju-log "Setting up the python environment"
easy_install virtualenv
easy_install virtualenvwrapper
easy_install pip

#export WORKON_HOME=$HOME/.virtualenvs
#source /usr/local/bin/virtualenvwrapper.sh

#rmvirtualenv catami
#mkvirtualenv catami --system-site-packages
#workon catami

#sometimes it can take a little while for the virtualenv to be initiated, just hold up for a second before continuing
#sleep 5s

#==================================================#
# PULL THE CATAMI CODE FROM GIT AND INSTALL 
#==================================================#
#juju-log "Pulling CATAMI code from git"

# !! For debugging.  remove existing directories
#rm -r /home/catami

cd /home/catami/catamiportal
git clone https://github.com/catami/catami.git
cd catami

#juju-log "Pip installing python dependencies" 
pip install -r requirements.txt

#juju-log "syncing database"
python manage.py syncdb --noinput

#==================================================#
# SETUP INITIAL MIGRATION FOR SOUTH
#==================================================#
# guardian easy_thumbnails
# ADD NEW APPS TO THIS LIST

#!!! accounts may need to be after accounts in the following list of apps

apps=(guardian accounts Force staging dbadmintool easy_thumbnails userena clustering collection)
for app in "${apps[@]}"; do
    echo Doing south migration for ${app}
    if [ "${app}" != 'clustering' ] ; then
        echo "reseting app ${app}"
        ./manage.py reset ${app} --noinput
    fi

    python manage.py schemamigration ${app} --initial
#    python manage.py syncdb --noinput
#    python manage.py migrate ${app} 0001 --fake
    python manage.py migrate ${app} --fake
    #python manage.py migrate ${app}
done

#python manage.py syncdb --noinput

#python manage.py migrate

python manage.py check_permissions

#juju-log "set up Django superuser"
su postgres -c "psql -d Force -c \"insert into auth_user (id, username, first_name, last_name, email, password, is_staff, is_active, is_superuser,last_login,date_joined) values (-2, '$U_NAME','catami','catami', 'catami@ivec.org', '$PASSWORD',true,true,true,'2012-11-01 14:26:20','2012-11-01 14:26:20')\""

#==================================================#
# DOWNLOAD AND INSTALL SOLR
#==================================================#
#juju-log "pulling and installing solr"
#echo pulling and installing solr
#cd ..
#wget  http://mirrors.gigenet.com/apache/lucene/solr/4.1.0/apache-solr-4.1.0.zip
#unzip apache-solr-4.1.0.zip
#cd apache-solr-4.1.0
#cd example
#nohup java -jar start.jar &

#echo installing search
#cd ../../catami
#sh src/install_search.sh

#echo rebuilding index
#python manage.py rebuild_index --noinput

#echo updating index
#python manage.py update_index

#==================================================#
# SET UP APACHE PORT REVERSE PROXY
#==================================================#
a2enmod proxy_http
a2enmod rewrite

echo "catamiportal install complete"

#==================================================#
# ADD CRON JOB TO DO A HOURLY BACKUP.
#==================================================#


#==================================================#
# add the current directory and the parent directory to PYTHONPATH
# sets DJANGO_SETTINGS_MODULE
#==================================================#
export DJANGO_SETTINGS_MODULE=catamiPortal.settings

echo "Creating cron job for backup"
BAKSCRIPT=/etc/cron.hourly/catamiPortalBak.py
sudo touch $BAKSCRIPT
sudo echo \#! /usr/bin/env python >> $BAKSCRIPT
sudo echo import os >> $BAKSCRIPT
sudo echo import sys >> $BAKSCRIPT
sudo echo os.chdir\(\'$CATAMI_HOME/catami\'\) >> $BAKSCRIPT
sudo echo sys.path.append\(\'$CATAMI_HOME/catami/dbadmintool\'\) >> $BAKSCRIPT
sudo echo sys.path.append\(\'$CATAMI_HOME/catami\'\) >> $BAKSCRIPT
sudo echo os.environ\[\'DJANGO_SETTINGS_MODULE\' \] = \"catamiPortal.settings\" >> $BAKSCRIPT
sudo echo import dbadmintool.administratorbot as administratorbot >> $BAKSCRIPT
sudo echo bender = administratorbot.Robot\(\) >> $BAKSCRIPT
sudo echo bender.make_local_backup\(directory=\'${CATAMI_HOME}/catami/dbadmintool/backup/\'\) >> ${BAKSCRIPT}

chmod +x $BAKSCRIPT

#==================================================#
# ADD CRON SCRIPT TO LOG DATABASE DATA
#==================================================#
echo "Creating cron job for database logging"
LOGSCRIPT=/etc/cron.hourly/catamiPortalLog.py
sudo touch $LOGSCRIPT
sudo echo \#! /usr/bin/env python >> $LOGSCRIPT
sudo echo import os >> $LOGSCRIPT
sudo echo import sys >> $LOGSCRIPT
sudo echo os.chdir\(\'$CATAMI_HOME/catami\'\) >> $LOGSCRIPT
sudo echo sys.path.append\(\'$CATAMI_HOME/catami/dbadmintool\'\) >> $LOGSCRIPT
sudo echo sys.path.append\(\'$CATAMI_HOME/catami\'\) >> $LOGSCRIPT
sudo echo os.environ\[\'DJANGO_SETTINGS_MODULE\' \] = \"catamiPortal.settings\" >> $LOGSCRIPT
sudo echo import dbadmintool.administratorbot as administratorbot >> $LOGSCRIPT
sudo echo dbReportBot = administratorbot.ReportTools\(\) >> $LOGSCRIPT
sudo echo dbReportBot.collect_stats\(\) >> ${LOGSCRIPT}

chmod +x $LOGSCRIPT

#juju-log "catamiportal install complete"
echo DONE!!

#==================================================#
# SETUP GEOSERVER
#==================================================#

if [ -a geoserver-2.2.4-war.zip ]
then
    echo 'geoserver-2.2.4.zip found, skipping download'
else
    echo 'Downloading geoserver'
    wget http://downloads.sourceforge.net/project/geoserver/GeoServer/2.2.4/geoserver-2.2.4-war.zip
fi

unzip geoserver-2.2.4-war.zip
sudo cp geoserver.war /var/lib/tomcat7/webapps/

#Geoserver takes tome time to finish installing.  TODO: find someway of monitoring
sleep $GEOSERVER_WAIT_TIME

cd $CATAMI_HOME

# sed replace the username and password in datastore-config.xml
sed -i "s/pocock/$U_NAME/g" datastore-config.xml
sed -i "s/qwer789ASDF456zxcv123/$PASSWORD/g" datastore-config.xml

echo 'setting up geoserver'

# do this as default admin admin:geoserver

curl -u admin:geoserver -v -XPOST -H 'Content-type: text/xml' \
   -d '<workspace><name>catami</name></workspace>' \
   http://localhost:8080/geoserver/rest/workspaces ;

curl -u admin:geoserver -XPOST -T datastore-config.xml -H 'Content-type: text/xml' \
  http://localhost:8080/geoserver/rest/workspaces/catami/datastores ;

curl -u admin:geoserver -XPOST -H 'Content-type: text/xml' \
  -d '<featureType><name>Force_image</name></featureType>' \
  http://localhost:8080/geoserver/rest/workspaces/catami/datastores/CatamiImagePoints/featuretypes ;

#if doing this on an existing server with same style name that has been deleted from geoserver,
#need to actually delete the styles/catami-colour-by-depth.sld file first - geoserver does not delete it for some reason

curl -u admin:geoserver -XPOST -H 'Content-type: application/vnd.ogc.sld+xml' \
  -d @catami-colour-by-depth.sld http://localhost:8080/geoserver/rest/styles ;

curl -u admin:geoserver -XPUT -H 'Content-type: text/xml' \
  -d '<layer><defaultStyle><name>catami-colour-by-depth</name></defaultStyle><enabled>true</enabled></layer>' \
  http://localhost:8080/geoserver/rest/layers/catami:Force_image

#TODO change username and password for admin
# look in /var/lib/tomcat7/webapps/geoserver/data/security

sed -i "s/admin=geoserver/$U_NAME=$PASSWORD/g"     /var/lib/tomcat7/webapps/geoserver/data/security/users.properties.old
sudo mv /var/lib/tomcat7/webapps/geoserver/data/security/users.properties.old /var/lib/tomcat7/webapps/geoserver/data/security/users.properties

echo 'Restarting tomcaty'
sudo service tomcat7 restart

