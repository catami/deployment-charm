#!/bin/bash -x
#==================================================#
# BUILDS THE CATAMIPORTAL SERVER FROM A FRESH 
# INSTALL OF UBUNTU
# -------------------------------------------------#

CATAMI_HOME="/home/catami/catamiportal"
MEDIA_ROOT="/mnt/catami-media"

#mkdir -p /home/catami
mkdir -p $CATAMI_HOME
#mkdir -p $MEDIA_ROOT

# make media dirs and setup apache to serve imagery
#mkdir -p $MEDIA_ROOT/static

#mkdir -p $MEDIA_ROOT/staging
#mkdir -p $MEDIA_ROOT/staging/import
#mkdir -p $MEDIA_ROOT/staging/archive

#mkdir -p $MEDIA_ROOT/catami_live
#mkdir -p $MEDIA_ROOT/catami_live/thumbnailimages
#mkdir -p $MEDIA_ROOT/catami_live/importedimages

#mkdir -p $MEDIA_ROOT/archive

#chmod -R 777 $MEDIA_ROOT/staging
#chmod -R 777 $MEDIA_ROOT/catami_live

#== 
# Prepare Apache
#==
cp 000-default /etc/apache2/sites-enabled/

#==================================================#
# SETUP THE POSGIS TEMPLATE FOR POSTGRESQL
#==================================================#
GEOGRAPHY=0
POSTGIS_SQL=postgis.sql

if [ -d "/usr/share/postgresql/9.1/contrib/postgis-1.5" ]
then
    POSTGIS_SQL_PATH=/usr/share/postgresql/9.1/contrib/postgis-1.5
    GEOGRAPHY=1
fi

su postgres -c "createdb -E UTF8 template_postgis" && \
su postgres -c "( createlang -d template_postgis -l | grep plpgsql || createlang -d template_postgis plpgsql )" && \
su postgres -c "psql -d postgres -c \"UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';\"" && \
su postgres -c "psql -d template_postgis -f $POSTGIS_SQL_PATH/$POSTGIS_SQL" && \
su postgres -c "psql -d template_postgis -f $POSTGIS_SQL_PATH/spatial_ref_sys.sql" && \
su postgres -c "psql -d template_postgis -c \"GRANT ALL ON geometry_columns TO PUBLIC;\"" && \
su postgres -c "psql -d template_postgis -c \"GRANT ALL ON spatial_ref_sys TO PUBLIC;\""

if [ $GEOGRAPHY -eq 1 ]
then
    su postgres -c "psql -d template_postgis -c \"GRANT ALL ON geography_columns TO PUBLIC;\""
fi

#==================================================#
# SETUP THE DATABASE AND USERS
#==================================================#

su postgres -c "createuser -Rs -A -d -U postgres $U_NAME"
su postgres -c "createdb -E utf8 -O $U_NAME -T template_postgis catamidb"
su postgres -c "psql -c \"ALTER USER $U_NAME WITH PASSWORD '$PASSWORD';\""

sed -i '1a#!! Autogenerated by Jujuj catamiportal charm !!' /etc/postgresql/9.1/main/pg_hba.conf
sed -i "2alocal	        all     $U_NAME                  md5"  /etc/postgresql/9.1/main/pg_hba.conf
sed -i '3ahost		all	all	0.0.0.0/0	md5' /etc/postgresql/9.1/main/pg_hba.conf

sed -i 's/#listen_addresses = /listen_addresses =/' /etc/postgresql/9.1/main/postgresql.conf
sed -i "s/localhost/*/" /etc/postgresql/9.1/main/postgresql.conf

sed -i "s/#port = 5432/port = 5432 #sed gen/" /etc/postgresql/9.1/main/postgresql.conf

#juju-log "Restarting postgres"
echo "Restarting postgres"
/etc/init.d/postgresql restart

#==================================================#
# SETUP THE PYTHON ENVIRONMENT
#==================================================#
#juju-log "Setting up the python environment"
#easy_install virtualenv
#easy_install virtualenvwrapper
easy_install pip

#export WORKON_HOME=$HOME/.virtualenvs
#source /usr/local/bin/virtualenvwrapper.sh

#rmvirtualenv catami
#mkvirtualenv catami --system-site-packages
#workon catami

#sometimes it can take a little while for the virtualenv to be initiated, just hold up for a second before continuing
#sleep 5s

#==================================================#
# PULL THE CATAMI CODE FROM GIT AND INSTALL 
#==================================================#
#juju-log "Pulling CATAMI code from git"

cd /home/catami/catamiportal

#move to the revision to deploy
if [ -n ${BRANCH} ] # if a branch name is given
then
    #git reset --hard $REVISION
    git clone -b $BRANCH https://github.com/catami/catami.git 
else
    git clone https://github.com/catami/catami.git	
fi

cd catami

#why? because otherwise the django-nose install fails.  This is a nose bug over 1 year old. Good work guys.
rm -fr /usr/local/man

#juju-log "Pip installing python dependencies" 
#pip install --upgrade -r requirements.txt
pip install -r requirements.txt

# local_settings.py
touch $CATAMI_HOME/catami/catamiPortal/local_settings.py 

sed -i "s@STAGING_IMPORT_DIR_TEXT@$MEDIA_ROOT/staging/import@g" $CATAMI_HOME/catami/catamiPortal/local_settings.py
sed -i "s@STAGING_ARCHIVE_DIR_TEXT@$MEDIA_ROOT/staging/archive@g" $CATAMI_HOME/catami/catamiPortal/local_settings.py
sed -i "s@STAGING_WEBIMAGE_MAX_SIZE@(1360,1024)@g" $CATAMI_HOME/catami/catamiPortal/local_settings.py

#update main django settings for the current server
sed -i "s@WMS_URL =.*@WMS_URL = \"$SERVER:8080/geoserver/wms\" @g" $CATAMI_HOME/catami/catamiPortal/conf/settings/default.py
sed -i "s@IMAGES_ROOT.*@IMAGES_ROOT = \'$MEDIA_ROOT/catami_live/importedimages\'@g" $CATAMI_HOME/catami/catamiPortal/conf/settings/default.py
sed -i "s@THUMBNAILS_STORAGE_ROOT.*@THUMBNAILS_STORAGE_ROOT = \'$MEDIA_ROOT/catami_live/thumbnailimages\'@g" $CATAMI_HOME/catami/catamiPortal/conf/settings/default.py

#configure project username and password
sed -i "s@pocock@$U_NAME@g" $CATAMI_HOME/catami/catamiPortal/conf/settings/default.py
sed -i "s@qwer789ASDF456zxcv123@$PASSWORD@g" $CATAMI_HOME/catami/catamiPortal/conf/settings/default.py

#juju-log "syncing database"
python manage.py syncdb --noinput

#==================================================#
# SETUP INITIAL MIGRATION FOR SOUTH
#==================================================#

#!!! accounts may need to be after accounts in the following list of apps
python manage.py migrate --all
python manage.py syncdb --all --noinput

#load the waffle fixtures for feature switching
python manage.py loaddata catamidb/fixtures/waffle.json

#this if for django-guardian, make sure users all have the requires permission associated
python manage.py check_permissions

python manage.py collectstatic --noinput

chmod a+rw log/catamiPortal.log

#juju-log "set up Django superuser"
echo "Configuring Django superuser"
echo "from django.contrib.auth.models import User; User.objects.create_superuser('$U_NAME', 'catami@ivec.org', '$PASSWORD')" | ./manage.py shell

#need to create a view on postgres so that geoserver can access measurements
su postgres -c "psql -d catamidb -c \"CREATE VIEW public.measurements_view AS SELECT p.id, max(CASE WHEN (m.measurement_type_id = 1) THEN m.value ELSE NULL::double precision END) AS temperature, max(CASE WHEN (m.measurement_type_id = 2) THEN m.value ELSE NULL::double precision END) AS salinity, max(CASE WHEN (m.measurement_type_id = 3) THEN m.value ELSE NULL::double precision END) AS pitch, max(CASE WHEN (m.measurement_type_id = 4) THEN m.value ELSE NULL::double precision END) AS roll, max(CASE WHEN (m.measurement_type_id = 5) THEN m.value ELSE NULL::double precision END) AS yaw, max(CASE WHEN (m.measurement_type_id = 6) THEN m.value ELSE NULL::double precision END) AS altitude FROM catamidb_scientificposemeasurement m, catamidb_pose p WHERE (m.pose_id = p.id) GROUP BY p.id;\""
su postgres -c "psql -d catamidb -c \"GRANT ALL ON public.measurements_view TO PUBLIC;\""

#==================================================#
# SET UP APACHE PORT REVERSE PROXY
#==================================================#
a2enmod proxy_http
a2enmod rewrite

#change the run user and groups of apache, so that our underlying storage system can work with the data we are storing
sed -i "s@APACHE_RUN_USER=.*@APACHE_RUN_USER=catami @g" /etc/apache2/envvars
sed -i "s@APACHE_RUN_GROUP=.*@APACHE_RUN_GROUP=catami-data @g" /etc/apache2/envvars

#need to give catami user access to here, so it can run apache
chown -R catami /var/lock/apache2

echo "Catami Portal install complete"

#==================================================#
# CONFIGURE BACKUPS
#==================================================#

# Do an initial backup

# Hourly backups from here on in

#==================================================#
# add the current directory and the parent directory to PYTHONPATH
# sets DJANGO_SETTINGS_MODULE
#==================================================#
export DJANGO_SETTINGS_MODULE=catamiPortal.settings

#echo "Creating cron job for backup"
#cp catami-postgres-backup-cron.sh /etc/cron.hourly/
#BAKSCRIPT=/etc/cron.hourly/catami-postgres-backup-cron.sh
#sudo touch $BAKSCRIPT
#sudo echo \#! /usr/bin/env python >> $BAKSCRIPT
#sudo echo import os >> $BAKSCRIPT
#sudo echo import sys >> $BAKSCRIPT
#sudo echo os.chdir\(\'$CATAMI_HOME/catami\'\) >> $BAKSCRIPT
#sudo echo sys.path.append\(\'$CATAMI_HOME/catami/dbadmintool\'\) >> $BAKSCRIPT
#sudo echo sys.path.append\(\'$CATAMI_HOME/catami\'\) >> $BAKSCRIPT
#sudo echo os.environ\[\'DJANGO_SETTINGS_MODULE\' \] = \"catamiPortal.settings\" >> $BAKSCRIPT
#sudo echo import dbadmintool.administratorbot as administratorbot >> $BAKSCRIPT
#sudo echo bender = administratorbot.Robot\(\) >> $BAKSCRIPT
#sudo echo bender.make_local_backup\(directory=\'${CATAMI_HOME}/catami/dbadmintool/backup/\'\) >> ${BAKSCRIPT}


#chmod +x $BAKSCRIPT

#==================================================#
# ADD CRON SCRIPT TO LOG DATABASE DATA
#==================================================#
echo "Creating cron job for database logging"
LOGSCRIPT=/etc/cron.hourly/catamiPortalLog.py
sudo touch $LOGSCRIPT
sudo echo \#! /usr/bin/env python >> $LOGSCRIPT
sudo echo import os >> $LOGSCRIPT
sudo echo import sys >> $LOGSCRIPT
sudo echo os.chdir\(\'$CATAMI_HOME/catami\'\) >> $LOGSCRIPT
sudo echo sys.path.append\(\'$CATAMI_HOME/catami/dbadmintool\'\) >> $LOGSCRIPT
sudo echo sys.path.append\(\'$CATAMI_HOME/catami\'\) >> $LOGSCRIPT
sudo echo os.environ\[\'DJANGO_SETTINGS_MODULE\' \] = \"catamiPortal.settings\" >> $LOGSCRIPT
sudo echo import dbadmintool.administratorbot as administratorbot >> $LOGSCRIPT
sudo echo dbReportBot = administratorbot.ReportTools\(\) >> $LOGSCRIPT
sudo echo dbReportBot.collect_stats\(\) >> ${LOGSCRIPT}

chmod +x $LOGSCRIPT

#juju-log "catamiportal install complete"

#give permissions all to the catami users
chown -R catami $CATAMI_HOME
chgrp -R catami $CATAMI_HOME

#chown -R catami $MEDIA_ROOT
#chgrp -R catami $MEDIA_ROOT

echo "... Done"
